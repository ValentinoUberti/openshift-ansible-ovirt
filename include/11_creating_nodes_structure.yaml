---
- name: Creating infrastructure code
  hosts: localhost 
  gather_facts: no


  vars:
    bootstrap: 1
    number_of_masters: "{{ cluster['masters']  }}"
    number_of_infra: "{{ cluster['infra']  }}"
    number_of_workers: "{{ cluster['workers']  }}"
    number_of_nodes: "{{ (number_of_masters | int) + ( number_of_infra | int) + ( number_of_workers | int) + bootstrap | int }}"
    nodes_calculated_ip: []
    masters_calculated_data: []
    infra_calculated_data: []
    workers_calculated_data: []
    bootstrap_calculated_data: []
    nodes_calculated_data: []
    ip_template:
      primary_ip: "{{ dhcp.start | ipmath(item | int) }}"
      mac_address: ""
      reverse_dns: "{{ dhcp.start | ipmath(item | int) | ipaddr('revdns')  }}"
      node_type: ""
      node_hostname: ""

 
  tasks:
    - debug:
        var: number_of_workers

    - name: Calculating all openshift nodes ip and reverse dns
      set_fact:
        nodes_calculated_ip: "{{ nodes_calculated_ip + [ip_template] }}"
      with_sequence: "start=1 count={{ number_of_nodes  }}"


    - set_fact:
        cluster_fqdn: "{{ cluster.name }}.{{ networking.domain_name }}"

    - set_fact:
        masters_calculated_data: "{{ masters_calculated_data + [item.1 | combine( {'node_type': 'master','node_hostname':'master-'+(item.0 | string)+'.'+cluster_fqdn} )] }}"
      with_indexed_items:
        - "{{ nodes_calculated_ip }}"
      when:
        - item.0 < ( number_of_masters | int )


    - set_fact:
        infra_calculated_data: "{{ infra_calculated_data + [item.1 | combine( {'node_type': 'infra','node_hostname':'infra-'+(( item.0 -(number_of_masters | int))  | string)+'.'+cluster_fqdn} )] }}"
      with_indexed_items:
        - "{{ nodes_calculated_ip }}"
      when:
        - item.0 < ( (number_of_masters | int) + (number_of_infra | int) )
        - item.0 >= ( (number_of_masters | int) )

    - set_fact:
        workers_calculated_data: "{{ workers_calculated_data + [item.1 | combine( {'node_type': 'worker','node_hostname':'worker-'+(( item.0 -(number_of_masters | int + number_of_infra | int))  | string)+'.'+cluster_fqdn} )] }}"
      with_indexed_items:
        - "{{ nodes_calculated_ip }}"
      when:
        - item.0 < ( (number_of_masters | int) + (number_of_infra | int) + (number_of_workers | int) )
        - item.0 >= ( (number_of_masters | int) + (number_of_infra | int) )


    - set_fact:
        bootstrap_calculated_data: "{{ bootstrap_calculated_data + [item.1 | combine( {'node_type': 'bootstrap','node_hostname':'bootstrap'+'.'+cluster_fqdn} )] }}"
      with_indexed_items:
        - "{{ nodes_calculated_ip }}"
      when:
        - item.0 == number_of_nodes | int  - 1

    - set_fact:
        nodes_calculated_data: "{{ masters_calculated_data + infra_calculated_data + workers_calculated_data + bootstrap_calculated_data }}"
    
    - debug:
        var: nodes_calculated_data

    - name: Register dummy host with variable
      add_host:
        name: "DUMMY_HOST"
        nodes_calculated_data: "{{ nodes_calculated_data }}"
        cluster_fqdn: "{{ cluster_fqdn }}"
        number_of_nodes: "{{ number_of_nodes }}"
    
- name: Creating oVirt Openshift nodes
  hosts: ovirt_engine
  remote_user: "{{ ovirt_engine_ssh_user }}"
  
  vars:
    nodes_mac_address_ip: []
    completed_node_data: []

  tasks:
    - set_fact:
        nodes_calculated_data: "{{ hostvars['DUMMY_HOST']['nodes_calculated_data'] }}"

    - set_fact:
        number_of_nodes: "{{ hostvars['DUMMY_HOST']['number_of_nodes'] }}"   
    
    - block:
      - name: Obtain SSO token with using username/password credentials
        ovirt_auth:
          url: https://{{ inventory_hostname }}/ovirt-engine/api
          username: "{{ ovirt.username }}"
          ca_file: "{{ ovirt.ca_file }}"
          password: "{{ ovirt.password }}"
      
      - name: Ensuring openshift nodes are not present on oVirt
        ovirt_vm:
          auth: "{{ ovirt_auth }}"
          name: "{{ item.node_hostname}}"
          state: absent
        loop: "{{ nodes_calculated_data }}"

      - name: Deleting disks
        ovirt_disk:
          auth: "{{ ovirt_auth }}"
          name: data-{{ item.node_hostname }}
          state: absent
        loop: "{{ nodes_calculated_data }}"
        

      - name: Creating disks
        ovirt_disk:
          auth: "{{ ovirt_auth }}"
          size: 50GiB
          name: data-{{ item.node_hostname }}
          interface: "{{ ovirt.storage.interface }}"
          storage_domain: "{{ ovirt.storage.storage_domain }}"
          state: present
          sparse: true
          bootable: true
        loop: "{{ nodes_calculated_data }}"

        
      - name: Ensuring openshift nodes are present on oVirt
        ovirt_vm:
          auth: "{{ ovirt_auth }}"
          name: "{{ item.node_hostname }}"
          memory: 2GiB
          storage_domain: "{{ ovirt.storage.storage_domain }}"
          cpu_cores: 2
          cpu_sockets: 2
          type: server
          cluster: "{{ ovirt.cluster }}"
          boot_devices:
            - hd
            - network
          nics:
            - name: eth0
              interface: "{{ ovirt.network.internal.interface }}"
              profile_name: "{{ ovirt.network.internal.profile }}" 
              nic_on_boot: true
          disks:
           - name: data-{{ item.node_hostname }}
             
          state: present
        loop: "{{ nodes_calculated_data }}"

      - name: Getting mac address of nodes
        ovirt_nic_info:
          auth: "{{ ovirt_auth }}"
          vm: "{{ item.node_hostname }}"
          fetch_nested: true
          nested_attributes:
            - mac
        loop: "{{ nodes_calculated_data }}"
        register: result
  
    
      - name: Getting mac address 
        set_fact:
          nodes_mac_address_ip: "{{ nodes_mac_address_ip + [item.ovirt_nics[0].mac.address] }}"
        loop: "{{ result.results }}"
  
      
      - set_fact:
          completed_node_data: "{{ completed_node_data + [item.1 | combine( {'mac_address': nodes_mac_address_ip[item.0] } )] }}"
        with_indexed_items:
          - "{{ nodes_calculated_data }}"
       
      - name: Register dummy host with variable
        add_host:
          name: "DUMMY_HOST_COMPLETED_DATA"
          completed_node_data: "{{ completed_node_data }}"
          
      rescue:
        - name: Ensuring openshift nodes are not present on oVirt
          ovirt_vm:
            auth: "{{ ovirt_auth }}"
            name: "{{ item.node_hostname}}"
            state: absent
          loop: "{{ nodes_calculated_data }}"

        - name: Deleting disks
          ovirt_disk:
            auth: "{{ ovirt_auth }}"
            name: data-{{ item.node_hostname }}
            state: absent
          loop: "{{ nodes_calculated_data }}"
        
          
- name: Saving cluster structure data to bastion
  hosts: bastion
  become: True
  tasks:
    - set_fact:
        completed_node_data: "{{ hostvars['DUMMY_HOST_COMPLETED_DATA']['completed_node_data'] }}"

    - name: Create fact directory
      file:
        path: /etc/ansible/facts.d/
        state: directory
        recurse: yes

    - name: Saving facts to bastion
      template:
       src: ../templates/cluster_data.j2
       dest: /etc/ansible/facts.d/cluster_data.fact
      


          

      
        