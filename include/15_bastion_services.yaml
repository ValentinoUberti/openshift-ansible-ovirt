- name: Bastion services configuration
  hosts: bastion
  
  vars:
    nodes: "{{ cluster['masters'] + cluster['workers']  +   cluster['bootstrap'] }}"
    number_of_nodes: "{{ nodes | length }}"
    master_nodes: "{{ cluster['masters'] }}"
    number_of_masters: "{{ master_nodes | length }}"
    nodes_calculated_data: []
    ip_template:
      primary_ip: "{{ lb.lb_internal_network_ip | ipmath(item | int) }}"
      mac_address: "{{ nodes[ (number_of_nodes | int ) - (item | int) ].mac }}"
      reverse_dns: "{{ lb.lb_internal_network_ip | ipmath(item | int) | ipaddr('revdns')  }}"
      
  tasks:
    
    - name: Calculating number of node (Bastion)
      set_fact:
        number_of_nodes: "{{ nodes | length }}"
    - name: Setting calculated data (Bastion)
      set_fact:
        nodes_calculated_data: "{{ nodes_calculated_data + [ip_template] }}"
      with_sequence: "start=1 count={{ number_of_nodes }}"
    
    - block:
         
        - name: Ensuring tftp boot directory exists
          file:
            state: directory
            path: /var/lib/tftpboot/pxelinux.cfg
 
        - name: Copy pxelinux.0 file
          command: cp /usr/share/syslinux/{{ item }} /var/lib/tftpboot/
          loop:
            - menu.c32
            - chain.c32
            - ldlinux.c32
            - libcom32.c32
            - ldlinux.c32
            - pxelinux.0
            - libutil.c32
 
        - name: Creating seelinux rules for dnsmasq service
          copy:
            src: files/my-dnsmasq.pp
            dest: /tmp

        - name: Apply seelinux rules for dnsmasq service
          command: semodule -X 300 -i /tmp/my-dnsmasq.pp 

        - name: Delete selinux temp file
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/my-dnsmasq.pp
            - /tmp/my-dnsmasq.te 
 
        - name: Creating nginx subdirectory
          file:
            state: directory
            path: /usr/share/nginx/html/metal

        - name: Firing dnsmasq template
          template:
            src: templates/dnsmasq.j2
            dest: /etc/dnsmasq.conf

        - name: Firing pxe boot template
          template:
            src: templates/pxeboot_default.j2
            dest: /var/lib/tftpboot/pxelinux.cfg/default
    
        - name: Configure {{ ansible_local.external_connection.conname }} to use {{ networking.internal_network_ip }} as DNS server
          command: nmcli con mod '{{ ansible_local.external_connection.conname }}' ipv4.dns "{{ networking.internal_network_ip }}" 

        - name: Refreshing {{ ansible_local.external_connection.conname }}
          shell: nmcli con down "{{ ansible_local.external_connection.conname }}"; nmcli con up "{{ ansible_local.external_connection.conname }}"

        - name: Enabling services
          service:
            name: "{{ item }}"
            enabled: true
          loop: "{{ systemd_services }}"
            
        - name: Rebooting bastion
          reboot:

        
        
          
      become: True

    

  
    
    
