- name: Bastion services configuration
  hosts: bastion
  tasks:
    
    - name: Calculating number of node (Bastion)
      set_fact:
        completed_node_data: "{{ ansible_facts.ansible_local.cluster_data }}"

    - name: Fetching release name
      uri:
        url: "{{ downloads.boot.base_url }}/sha256sum.txt"
        return_content: yes
      register: ocp_version

    - set_fact:
        installer_initramfs: '{{ ocp_version.content | regex_search("rhcos(.*)installer-initramfs(.*)") }}'

    - set_fact:
        installer_kernel: '{{ ocp_version.content | regex_search("rhcos(.*)installer-kernel(.*)") }}'

    - set_fact:
        coreos: '{{ ocp_version.content | regex_search("rhcos(.*)metal(.*)") }}'
        
    - block:
         
        - name: Ensuring tftp boot directory exists
          file:
            state: directory
            path: /var/lib/tftpboot/pxelinux.cfg
  
        
              
        - name: Firing pxe boot template for masters
          template:
            src: ../templates/pxeboot_masters.j2
            dest: /var/lib/tftpboot/pxelinux.cfg/01-{{ item.mac_address | replace(':','-') }}
          loop: "{{ completed_node_data }}"
          when: "{{ 'master' in item.node_type }}"

        - name: Firing pxe boot template for workers and infra
          template:
            src: ../templates/pxeboot_workers.j2
            dest: /var/lib/tftpboot/pxelinux.cfg/01-{{ item.mac_address | replace(':','-') }}
          loop: "{{ completed_node_data }}"
          when: "{{ ('infra' in item.node_type) or ('worker' in item.node_type) }}"

        - name: Firing pxe boot template for bootstrap
          template:
            src: ../templates/pxeboot_bootstrap.j2
            dest: /var/lib/tftpboot/pxelinux.cfg/01-{{ item.mac_address | replace(':','-') }}
          loop: "{{ completed_node_data }}"
          when: "{{ ('bootstrap' in item.node_type) }}"

        - name: Copy pxelinux.0 file
          command: cp /usr/share/syslinux/{{ item }} /var/lib/tftpboot/
          loop:
            - menu.c32
            - chain.c32
            - ldlinux.c32
            - libcom32.c32
            - ldlinux.c32
            - pxelinux.0
            - libutil.c32
 
        - name: Creating seelinux rules for dnsmasq service
          copy:
            src: ../files/my-dnsmasq.pp
            dest: /tmp

        - name: Apply seelinux rules for dnsmasq service
          command: semodule -X 300 -i /tmp/my-dnsmasq.pp 

        - name: Delete selinux temp file
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /tmp/my-dnsmasq.pp
            - /tmp/my-dnsmasq.te 
 
        - name: Creating nginx subdirectory
          file:
            state: directory
            path: /usr/share/nginx/html/metal

        - name: Firing dnsmasq template
          template:
            src: ../templates/dnsmasq.j2
            dest: /etc/dnsmasq.conf
        
        - name: Configure {{ ansible_local.external_connection.conname }} to use {{ networking.internal_network_ip }} as DNS server
          command: nmcli con mod '{{ ansible_local.external_connection.conname }}' ipv4.dns "{{ networking.internal_network_ip }}" 

        - name: Refreshing {{ ansible_local.external_connection.conname }}
          shell: nmcli con down "{{ ansible_local.external_connection.conname }}"; nmcli con up "{{ ansible_local.external_connection.conname }}"

        - name: Enabling services
          service:
            name: "{{ item }}"
            enabled: true
          loop: "{{ systemd_services }}"
            
        - name: Rebooting bastion
          reboot:

        
        
          
      become: True

    

  
    
    
