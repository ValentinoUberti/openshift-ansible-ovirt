---
- name: Networking playbook 
  hosts: bastion,lb
  become: True
  vars_files:
    - vars/vars.yaml
    - vars/services.yaml
  tasks:

    - name: Activating firewalld
      service:
        name: firewalld
        state: started
        enabled: true


    - name: "Getting {{ inventory_hostname }} ip address on first interface"
      set_fact:
        first_interface_ip: "{{ lookup('dig', ansible_host) }}"

    - name: Getting interface name connected to {{ first_interface_ip }}
      set_fact:
        first_interface: "{{ item }}"
      when:
        - hostvars[inventory_hostname]['ansible_{{ item }}']['ipv4'] is defined 
        - hostvars[inventory_hostname]['ansible_{{ item }}']['ipv4']['address'] == first_interface_ip
      with_items:
        - "{{ ansible_interfaces }}"

    - name: Getting second interface name
      set_fact:
        second_interface: "{{ item }}"
      when: 
        - item !='lo'
        - item != first_interface
      with_items:
        - "{{ ansible_interfaces }}"

    - name: Test if second interface exists
      fail:
        msg: Second network interface dosen't exists
      when: second_interface is not defined

    - name: Print detected interfaces name for {{ inventory_hostname }}
      debug:
        msg: >
             External interface: '{{ first_interface }}', 
             internal interface: '{{ second_interface }}'

    - name: Detect if {{ inventory_hostname }} can reach internet through first interface
      command: ping -c3 -I {{ first_interface }} 8.8.8.8
      changed_when: False

    - name: Detect if {{ inventory_hostname }} can resolve internet dns through first interface
      command: dig google.com
      changed_when: False

    - name: Create fact directory
      file:
        path: /etc/ansible/facts.d/
        state: directory
        recurse: yes

    - name: Getting connection name attached to interface {{ first_interface }}
      shell: nmcli -g name,device con | grep {{ first_interface }} | awk '{split($0,a,":"); print a[1]}'
      register: first_connection_name

    - name: Getting connection name attached to interface {{ second_interface }}
      shell: nmcli -g name,device con | grep {{ second_interface }} | awk '{split($0,a,":"); print a[1]}'
      register: second_connection_name


    - set_fact:
         ifname: "{{ first_interface }}"
      failed_when: first_interface is not defined

    - set_fact:
         conname: "{{ first_connection_name.stdout }}"
      failed_when: first_connection_name.stdout is not defined

    - name: Testing interface and connection name for {{ inventory_hostname }}
      fail:
        msg: Unable to retrieve connection name for {{ inventory_hostname }}
      when: (conname is not defined) or (conname | length <1)

    - name: Adding external networking custom facts to {{ inventory_hostname }}
      template:
       src: templates/interfaces.j2
       dest: /etc/ansible/facts.d/external_connection.fact


    - set_fact:
         ifname: "{{ second_interface }}"

    - set_fact:
         conname: "{{ second_connection_name.stdout }}"
      
    - name: Testing interface and connection name for {{ inventory_hostname }}
      fail:
        msg: Unable to retrieve connection name for {{ inventory_hostname }}
      when: (conname is not defined)  or (conname | length <1)

    - name: Adding internal networking custom facts to {{ inventory_hostname }}
      template:
       src: templates/interfaces.j2
       dest: /etc/ansible/facts.d/internal_connection.fact
    
    - name: Check for custom facts on  {{ inventory_hostname }}
      setup:
        
    - debug:
        var: ansible_local.external_connection.conname

    - debug:
        var: ansible_local.external_connection.ifname


    - debug:
        var: ansible_local.internal_connection.conname

    - debug:
        var: ansible_local.internal_connection.ifname