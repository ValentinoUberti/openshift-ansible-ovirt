- name: Json node list
  hosts: bastion
  gather_facts: no
  vars_files: 
    - vars/vars.yaml
    - vars/downloads.yaml
    - vars/pxe_menu.yaml
  vars:
    nodes: "{{ cluster['masters'] + cluster['workers']  +   cluster['bootstrap'] }}"
    number_of_nodes: "{{ nodes | length }}"
    cluster_domain: ".{{ cluster.name }}.{{ networking.domain_name }}"
    nodes_calculated_data: []
    nodes_fqdn_and_mac: []
    completed_list: []
    
    masters_fqdn_mac_template:
      node_fqdn: '{{ node_type }}-{{ (masters_mac_list.index((nodes_calculated_data | list)[item | int].mac_address ) | string )}}{{ cluster_domain }}'
      mac:  "{{ (nodes_calculated_data | list)[item | int].mac_address }}"
    
    workers_fqdn_mac_template:
      node_fqdn: '{{ node_type }}-{{ (workers_mac_list.index((nodes_calculated_data | list)[item | int].mac_address ) | string )}}{{ cluster_domain }}'
      mac:  "{{ (nodes_calculated_data | list)[item | int].mac_address }}"
    
    bootstrap_fqdn_mac_template:
      node_fqdn: '{{ node_type }}-{{ (bootstrap_mac_list.index((nodes_calculated_data | list)[item | int].mac_address ) | string )}}{{ cluster_domain }}'
      mac:  "{{ (nodes_calculated_data | list)[item | int].mac_address }}"
    
    ip_template:
      primary_ip: "{{  networking.internal_network[:-1] + item }}"
      mac_address: "{{ nodes[ (number_of_nodes | int ) - (item | int) ].mac }}"
      reverse_dns: "{{ ( networking.internal_network[:-1] + item ) | ipaddr('revdns')  }}"
      
          
  tasks:
    
    - name: Calculating number of node (Bastion)
      set_fact:
        number_of_nodes: "{{ nodes | length }}"

    - name: Setting calculated data (Bastion)
      set_fact:
        nodes_calculated_data: "{{ nodes_calculated_data + [ip_template] }}"
      with_sequence: "start=3 count={{ number_of_nodes }}"

    - set_fact:
         masters_mac_list: "{{ cluster['masters'] | map(attribute='mac') | list }}"
      
    - set_fact:
         workers_mac_list: "{{ cluster['workers'] | map(attribute='mac') | list }}"
    
    - set_fact:
         bootstrap_mac_list: "{{ cluster['bootstrap'] | map(attribute='mac') | list }}"
        
    - debug:
        msg: "Found master in position {{ masters_mac_list.index(item.mac_address) }}"
      loop: "{{ nodes_calculated_data  }}"
      when: item.mac_address in masters_mac_list


    - name: Setting master node type
      set_fact: 
        node_type: "master"

    - name: Setting masters fqdn and mac
      set_fact:
        nodes_fqdn_and_mac: "{{ nodes_fqdn_and_mac + [masters_fqdn_mac_template] }}"
      with_sequence: "start=0 count={{ nodes_calculated_data | length }}"
      when: (nodes_calculated_data | list)[item | int].mac_address in masters_mac_list

    - name: Setting workers node type
      set_fact: 
        node_type: "worker"

    - name: Setting workers fqdn and mac
      set_fact:
        nodes_fqdn_and_mac: "{{ nodes_fqdn_and_mac + [workers_fqdn_mac_template] }}"
      with_sequence: "start=0 count={{ nodes_calculated_data | length }}"
      when: (nodes_calculated_data | list)[item | int].mac_address in workers_mac_list

    - name: Setting bootstrap node type
      set_fact: 
        node_type: "bootstrap"

    - name: Setting bootstrap fqdn and mac
      set_fact:
        nodes_fqdn_and_mac: "{{ nodes_fqdn_and_mac + [bootstrap_fqdn_mac_template] }}"
      with_sequence: "start=0 count={{ nodes_calculated_data | length }}"
      when: (nodes_calculated_data | list)[item | int].mac_address in bootstrap_mac_list

    - debug:
        var: nodes_fqdn_and_mac

    - name: Completing the node list
      debug:
         msg: "{{ item | combine({'fqdn': nodes_fqdn_and_mac | selectattr('mac', 'match',item.mac_address) | map(attribute='node_fqdn') | first  })   }}"
      loop: "{{ nodes_calculated_data | list }}"

    - debug:
        var: completed_list

    - name: Completing the node list
      set_fact:
         completed_list: "{{ completed_list + [ item | combine({'fqdn': nodes_fqdn_and_mac | selectattr('mac', 'match',item.mac_address) | map(attribute='node_fqdn') | first  }) ]  }}" 
     #item | union (nodes_fqdn_and_mac | selectattr("mac", "equalto", "item.mac_address"))
      loop: "{{ nodes_calculated_data | list }}"

    - debug:
        var: completed_list